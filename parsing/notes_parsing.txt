// map:
// 2D array representing the map (0 for no walls, 1 for walls)

// map_width, map_height:
// Dimensions of the map

// texture_north, texture_south, texture_east, texture_west, texture_door:
// Textures for the north, south, east, and west walls and the door

// floor_color, ceiling_color:
// Colors for the floor and ceiling

typedef struct s_map
{
	// Map representation
	int	**map;
	int	map_width;
	int	map_height;

	// Map textures and colors
	int	**texture_north;
	int	**texture_south;
	int	**texture_east;
	int	**texture_west;
	int	**texture_door;
	int	***texture_sprite;
	int	floor_color;
	int	ceiling_color;
}		t_map;


function to calculate map_width(largeur)



function to calculate map_height(hauteur)

Je boucle jusqu'a ce que gnl renvoie rien.
skip whitespaces, si NO trouvé -> stocker chemin img NO dans int **texture_north;
same with OE etc...
if 1 found  and no OE
Map forcement en dernier
X sauts de lignes entre les caracs de couleurs/textures
X espaces entre id struct et path






How to transform from get_data_addr to tab int **:
#include "mlx.h"
#include <stdio.h>

int main()
{
    void *mlx_ptr;
    void *img_ptr;
    char *img_data;
    int width, height;
    int bits_per_pixel, size_line, endian;

    // 1. Initialiser MLX
    mlx_ptr = mlx_init();
    if (!mlx_ptr)
        return (1);

    // 2. Charger l'image depuis le fichier .xpm
    img_ptr = mlx_xpm_file_to_image(mlx_ptr, "assets/textures/colorstone.xpm", &width, &height);
    if (!img_ptr)
    {
        printf("Erreur: impossible de charger l'image\n");
        return (1);
    }

    // 3. Obtenir l'accès aux données de l'image
    img_data = mlx_get_data_addr(img_ptr, &bits_per_pixel, &size_line, &endian);

    // 4. Maintenant tu peux accéder aux pixels
    printf("Taille image: %dx%d\n", width, height);
    printf("Bits par pixel: %d\n", bits_per_pixel);
    printf("Octets par ligne: %d\n", size_line);

    // Exemple: récupérer la couleur du pixel en (10, 10)
    int x = 10, y = 10;
    int pixel_color = *(int*)(img_data + (y * size_line + x * (bits_per_pixel / 8)));
    printf("Couleur du pixel (10,10): %x\n", pixel_color);

    // Exemple: copier les données dans ton tableau int**
    int **texture = malloc(height * sizeof(int*));
    for (int i = 0; i < height; i++)
    {
        texture[i] = malloc(width * sizeof(int));
        for (int j = 0; j < width; j++)
        {
            texture[i][j] = *(int*)(img_data + (i * size_line + j * (bits_per_pixel / 8)));
        }
    }

    // 5. Nettoyer
    mlx_destroy_image(mlx_ptr, img_ptr);

    return (0);
}
